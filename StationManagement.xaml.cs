using static DD_QLQuanNet.data.QLQuanNetContext; using DD_QLQuanNet.data; using System.Collections.ObjectModel; using System.Windows; using System.Windows.Input; using System.Data;   namespace DD_QLQuanNet {     /// <summary>     /// Interaction logic for StationManagement.xaml     /// </summary>     public partial class StationManagement : Window     {         public ObservableCollection<Station> Stations { get; set; }         public StationManagement()         {             InitializeComponent();             LoadStation();             LoadUsers();         }         public void LoadStation()         {             var db = new QLQuanNetContext();             var stations = db.Stations.Select(s => new { s.Station_Name, s.Status }).ToList();             lvStation.ItemsSource = stations;         }         public void LoadUsers()         {             using var db = new QLQuanNetContext();             var members = db.Users                 .Where(u => u.Role == "Member")                 .Select(u => new {u.Username })                 .ToList();             cbxListUser.ItemsSource = members;         }         private void OnSearchStation_Click(object sender, RoutedEventArgs e)         {             var searchQuery = txtStationName.Text.Trim().ToLower();              using (var db = new QLQuanNetContext())             {                 // Tải tất cả các máy từ cơ sở dữ liệu trước                 var allStations = db.Stations                     .Select(s => new { s.Station_Name, s.Status })                     .ToList();                  // Sử dụng LINQ để lọc các máy trên phía client                 var filteredStations = allStations                     .Where(s => s.Station_Name != null && s.Station_Name.ToLower().Contains(searchQuery))                     .ToList();                  lvStation.ItemsSource = filteredStations;             }         }         private void OnSearchUser_Click(object sender, RoutedEventArgs e)         {             var selectedUser = txtSearchUser.Text.Trim().ToLower();              var db = new QLQuanNetContext();             var filteredUsers = db.Users                 .Where(u => u.Role == "Member" && u.Username.ToLower().Contains(selectedUser))                 .Select(u => new { u.Username })                 .ToList();             cbxListUser.ItemsSource = filteredUsers;             if (filteredUsers.Count > 0)             {                 cbxListUser.SelectedIndex = 0;                 cbxListUser.IsDropDownOpen = true;             }             else             {                 MessageBox.Show("No user selected.");                 cbxListUser.IsDropDownOpen = false;             }         }         private void OnTurnOff_Click(object sender, RoutedEventArgs e)         {             var selectedStation = lvStation.SelectedValue as string;             if (!string.IsNullOrEmpty(selectedStation))             {                 using var db = new QLQuanNetContext();                 var station = db.Stations.FirstOrDefault(s => s.Station_Name == selectedStation);                 if (station != null)                 {                     if (station.Status == "Maintenance")                     {                         MessageBox.Show("Station is under maintenance and cannot be turned off.");                         return;                     }                     if (station.Status == "Available")                     {                         MessageBox.Show("Station is already turned off.");                         return;                     }                     station.Status = "Available";                     station.User_ID = null;                     db.SaveChanges();                     MessageBox.Show("Station turned off successfully.");                 }                 LoadStation();             }             else             {                 MessageBox.Show("No station selected.");             }         }         private void OnTurnOn_Click(object sender, RoutedEventArgs e)         {             var selectedStation = lvStation.SelectedValue as string;             var selectedUser = cbxListUser.SelectedValue as string;              if (!string.IsNullOrEmpty(selectedStation))             {                 using var db = new QLQuanNetContext();                 var user = db.Users.FirstOrDefault(u => u.Username == selectedUser);                  if (user != null)                 {                     var existingStation = db.Stations.FirstOrDefault(s => s.User_ID == user.User_ID);                     if (existingStation != null)                     {                         MessageBox.Show($"User {user.Username} is already using station {existingStation.Station_Name}.");                         return;                     }                 }                  // Fetch the station using the selected station name                 var station = db.Stations.FirstOrDefault(s => s.Station_Name == selectedStation);                 if (station != null)                 {                     if (station.Status == "Maintenance")                     {                         MessageBox.Show("Station is under maintenance and cannot be turned on.");                         return;                     }                     if (!string.IsNullOrEmpty(selectedUser))                     {                         if (station.Status == "In Use")                         {                             var User = db.Users.FirstOrDefault(u => u.User_ID == station.User_ID);                             MessageBox.Show($"Station is already turned on by {User.Username}.");                             return;                         }                         station.Status = "In Use";                         station.User_ID = db.Users.FirstOrDefault(u => u.Username == selectedUser).User_ID;                         db.SaveChanges();                         MessageBox.Show("Station turned on successfully.");                     }                     else                     {                         MessageBox.Show("No user selected.");                     }                 }                 LoadStation();             }             else             {                 MessageBox.Show("No station selected.");             }         }         private void OnAddStation_Click(object sender, RoutedEventArgs e)         {          }         private void OnEditStation_Click(object sender, RoutedEventArgs e)         {          }         private void OnDeleteStation_Click(object sender, RoutedEventArgs e)         {          }         internal void OnToggleMaintenance_Click(object sender, RoutedEventArgs e)         {             var selectedStationName = lvStation.SelectedValue as string;             if (!string.IsNullOrEmpty(selectedStationName))             {                 using var db = new QLQuanNetContext();                 var station = db.Stations.FirstOrDefault(s => s.Station_Name == selectedStationName);                 if (station != null)                 {                     if (station.Status == "Maintenance")                     {                         station.Status = "Available";                     }                     else                     {                         station.Status = "Maintenance";                         station.User_ID = null;                     }                     db.SaveChanges();                     MessageBox.Show($"Station {station.Station_Name} is now {station.Status}.");                 }                 LoadStation();             }             else             {                 MessageBox.Show("No station selected.");             }         }          private void txtSearchUser_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)         {             if(e.Key == Key.Enter)             {                 OnSearchUser_Click(sender, e);             }         }          private void txtStationName_KeyDown(object sender, KeyEventArgs e)         {             if(e.Key == Key.Enter)             {                 OnSearchStation_Click(sender, e);             }         }     } } 